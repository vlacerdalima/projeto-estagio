DOCUMENTAÇÃO DO PROJETO: ANÁLISE DE VENDAS E RESTAURANTES

1. VISÃO GERAL DO PROJETO
-------------------------
Este projeto tem como objetivo principal exibir métricas de vendas, lidas a partir de um banco de dados PostgreSQL, em uma interface web simples.

* Objetivo Principal: Exibir o total de vendas agregadas e permitir a análise detalhada por restaurante.
* Tecnologias: Uso de TypeScript com componentes React/Next.js.
* Funcionalidades Chave: Endpoint para buscar o total de vendas (/api/vendas) e componentes de UI para interação e exibição de dados.

2. ARQUITETURA E ESTRUTURA DE ARQUIVOS
--------------------------------------
* lib/db.ts: Configura a conexão com o PostgreSQL (Pool) utilizando variáveis de ambiente. Responsável por executar todas as queries no banco.
* app/api/vendas/route.ts: Endpoint GET (/api/vendas). Busca o total de vendas (SELECT COUNT(*) FROM sales) e retorna o resultado em JSON.
* app/api/restaurantes/route.ts: Lista todos os restaurantes disponíveis (id, name).
* app/api/restaurante/[id]/vendas/route.ts: Conta o número de vendas para o restaurante específico.
* app/api/restaurante/[id]/faturamento/route.ts: Calcula o faturamento total (SUM(payments.value)) para o restaurante.
* components/VendasButton.tsx: Componente cliente que faz fetch em /api/vendas ao ser clicado e exibe o total.
* components/RestaurantSearch.tsx: Componente com dropdown para buscar e selecionar um restaurante, exibindo suas métricas de vendas e faturamento.
* app/page.tsx: Layout da Home: Header ("site para analise de restaurante") e dois Cards principais (Vendas Totais e Análise por Restaurante).
* components/ui/*.tsx: Componentes genéricos de interface (Button, Card, etc.), baseados no padrão shadcn/ui.

3. CONFIGURAÇÃO DO BANCO DE DADOS
---------------------------------
O projeto requer uma instância de banco de dados PostgreSQL para funcionar.

* Tabelas Essenciais: sales (para contagem de vendas) e payments (para faturamento).
* Indices de Performance: Para otimizar a análise por restaurante, os seguintes índices devem ser aplicados: idx_sales_store_id (na coluna store_id de sales) e idx_payments_sale_id (na coluna sale_id de payments).
* Ajuste: Se o nome da tabela de vendas mudar, a query em app/api/vendas/route.ts deve ser atualizada.

4. VARIÁVEIS DE AMBIENTE (REQUERIDAS)
--------------------------------------
As credenciais do banco de dados são lidas via variáveis de ambiente. Crie um arquivo .env.local na raiz do projeto (este arquivo deve ser IGNORADO pelo Git).

* DB_HOST: Host do servidor PostgreSQL (Ex: localhost)
* DB_PORT: Porta de conexão do PostgreSQL (Ex: 5432)
* DB_NAME: Nome do banco de dados (Ex: challenge_db)
* DB_USER: Usuário de acesso ao banco (Ex: challenge)
* DB_PASSWORD: Senha de acesso ao banco. (Preencha com a sua senha)

5. COMO RODAR O PROJETO
-----------------------
1. Garanta que a instância do PostgreSQL esteja rodando e acessível com as credenciais definidas.
2. Instale as dependências: npm install
3. Execute em modo desenvolvimento: npm run dev
4. Acesse: http://localhost:3000

6. ESTILO E INTERFACE
---------------------
* Estilo: Utiliza o sistema de classes Tailwind CSS, com componentes estruturados no padrão shadcn/ui.
* Paleta de Cores: Fundo Branco (#ffffff) e Salmão (#fa8072) como cor primária de acento.
